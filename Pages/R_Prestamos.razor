@using Tarea_2_2_2021.Models;
@using Tarea_2_2_2021.BLL;

@page "/Prestamos"
@page "/Prestamos/{PrestamoId:int}"

@inject IToastService toast

<EditForm Model="Prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header justify-content-center">
        <h3>Registro de Prestamos</h3>
    </div>

    <form>
        <br />

        @*PrestamosId*@
        <div class="form-row justify-content-center">
            <div class="col">

                <div class="form-group">

                    <label class="form-label">ID</label>

                    <div class="input-group ">
                        <InputNumber @bind-Value="Prestamos.PrestamoId" class="form-control col-5" />

                        <div class="input-group-append">
                            <button class="btn btn-info" type="button" @onclick="Buscar">
                                Buscar <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                </svg> <span class="glyphicon glyphicon-search"></span>
                            </button>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        @*Fecha*@
        <div class="form-group">
            <label>Fecha</label>
            <InputDate @bind-Value="Prestamos.FechaCreacion" class="form-control col-6" />
        </div>

        @*PersonaId*@
        <div class="form-group">
            <label>Usuario</label>
            <div>
                <InputSelect @bind-Value="Prestamos.UsuarioId" class="custom-select form-control col-6">

                    @foreach (var dept in UsuariosBLL.GetUsuario())
                    {
                        <option value="@dept.UsuarioId">@dept.Nombre</option>

                    }

                </InputSelect>
                <ValidationMessage For="@(() => Prestamos.UsuarioId)" />
            </div>
        </div>

        @*Concepto*@
        <div class="form-group">

            <label>Concepto</label>

            <InputText @bind-Value="Prestamos.Concepto" class="form-control col-6" />
            <ValidationMessage For="@(() => Prestamos.Concepto)" />

        </div>

        @*Monto*@
        <div class="form-group">

            <label>Monto</label>
            <InputNumber @bind-Value="Prestamos.Monto" class="form-control col-6" />

        </div>

        @*Balance*@
        <div class="form-group">

            <label>Balance</label>
            <InputNumber @bind-Value="Prestamos.Balance" class="form-control col-6" />

        </div>

        @*Botones*@
        <div class="row">

            <div class="col-2 d-grid gap-2">

                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">

                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                        <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                        <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z" />
                    </svg> Nuevo

                </button>

            </div>

            <div class="col-2 d-grid gap-2">
                <button type="submit" class="btn btn-lg btn-success" @onclick="Guardar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-box-arrow-in-down" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z" />
                        <path fill-rule="evenodd" d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                    </svg> Guardar
                </button>
            </div>

            <div class="col-2 d-grid gap-2">
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                    </svg> Eliminar
                </button>
            </div>

        </div>

        <br />

    </form>

</EditForm>


@code {
    [Parameter]
    public int PrestamoId { get; set; }

    private Prestamos Prestamos = new Prestamos();

    protected override void OnInitialized()
    {
        Nuevo(); //siempre se hace nuevo

    }

    public void Nuevo()
    {
        Prestamos = new Prestamos();
    }

    private void Buscar()
    {
        if (Prestamos.PrestamoId > 0 && PrestamosBLL.Existe(Prestamos.PrestamoId))
        {
            var encontrado = PrestamosBLL.Buscar(Prestamos.PrestamoId);

            if (encontrado != null)
                this.Prestamos = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
        else
            toast.ShowWarning("No existe Prestamo con ese Id");
    }

    public void Guardar()
    {
        bool fueGuardado;

        if (!Validar())
            return;

        fueGuardado = PrestamosBLL.Guardar(Prestamos);

        if (fueGuardado)
        {
            toast.ShowSuccess("Guardado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public bool Validar()
    {
        bool paso = true;

        if (Prestamos.UsuarioId <= 0)
        {
            toast.ShowError("Debe elegir un usuario para el prestamo");
            paso = false;
        }

        if (String.IsNullOrWhiteSpace(Prestamos.Concepto))
        {
            toast.ShowError("El campo Concepto no puede esta vacio");
            paso = false;
        }

        if (Prestamos.PrestamoId < 0)
        {
            toast.ShowError("El campo Id no puede ser de valor negativo");
            paso = false;
        }

        return paso;
    }

    public void Eliminar()
    {
        bool esElimino;

        esElimino = PrestamosBLL.Eliminar(Prestamos.PrestamoId);

        if (esElimino)
        {
            toast.ShowSuccess("Eliminado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
}
