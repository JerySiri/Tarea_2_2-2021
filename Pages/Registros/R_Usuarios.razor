@using Tarea_2_2_2021.Models;
@using Tarea_2_2_2021.BLL;

@page "/Usuarios"
@page "/Usuarios/{UsuarioId:int}"

@inject IToastService toast

<EditForm Model="Usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card justify-content-center">

        <div class="card-header">
            <h3>Registro de Usuarios</h3>
        </div>

        <div class="card-body center">

            @*UsuarioId y Boton Buscar*@
            <div class="form-row">
                <div class="col">
                    <div class="form-group">

                        <label class="form-label">ID</label>
                        <div class="input-group ">
                            <InputNumber @bind-Value="Usuarios.UsuarioId" class="form-control col-5" />

                            <div class="input-group-append">
                                <button type="button" class="btn btn-info" @onclick="Buscar">
                                    Buscar <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                    </svg> <span class="glyphicon glyphicon-search"></span>
                                </button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            @*Nombre*@
            <div class="form-group justify-content-center">

                <label>Nombre</label>
                <InputText @bind-Value="Usuarios.Nombre" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Nombre)" />

            </div>

            @*Telefono*@
            <div class="form-group">

                <label>Teléfono</label>
                <InputText @bind-Value="Usuarios.Telefono" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Telefono)" />

            </div>

            @*Cedula*@
            <div class="form-group">

                <label>Cédula</label>

                <InputText @bind-Value="Usuarios.Cedula" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Cedula)" />
            </div>

            @*Direccion*@
            <div class="form-group">

                <label>Dirección</label>

                <InputText @bind-Value="Usuarios.Direccion" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Direccion)" />

            </div>

            @*FechaNacimiento*@
            <div class="form-group">

                <label>Fecha De Nacimiento</label>
                <InputDate @bind-Value="Usuarios.FechaNacimiento" class="form-control col-6" />

            </div>

            @*Balance*@
            <div class="form-group">

                <label>Balance</label>
                <InputNumber readonly @bind-Value="Usuarios.Balance" class="form-control col-6" />

            </div>
        </div>

        @*Botones*@
        <div class="card-footer">

            <div class="form-group text-center" display: inline-block>

                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">

                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                        <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                        <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z" />
                    </svg> Nuevo

                </button>

                <button type="submit" class="btn btn-lg btn-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-box-arrow-in-down" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z" />
                        <path fill-rule="evenodd" d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                    </svg> Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                    </svg> Eliminar
                </button>

            </div>

        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int UsuarioId { get; set; }

    private Usuarios Usuarios = new Usuarios();

    protected override void OnInitialized()
    {
        Nuevo(); //siempre se hace nuevo

        Buscar(); //solo hace efecto si se paso un id por parametro
    }

    public void Nuevo()
    {
        Usuarios = new Usuarios();
    }

    private void Buscar()
    {
        if (Usuarios.UsuarioId > 0 )
        {
            var encontrado = UsuariosBLL.Buscar(Usuarios.UsuarioId);

            if (encontrado != null)
            {
                this.Usuarios = encontrado;
                ActualizarBalanceDelUsuario();
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool fueGuardado;

        fueGuardado = UsuariosBLL.Guardar(Usuarios);

        if (fueGuardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public bool Validar()
    {
        bool paso = true;

        if (Usuarios.UsuarioId < 0)
        {
            toast.ShowError("El campo Id no puede ser de valor negativo");
            paso = false;
        }

        if (String.IsNullOrWhiteSpace(Usuarios.Nombre))
        {
            toast.ShowError("El campo Nombre no puede esta vacio");
            paso = false;
        }

        if (String.IsNullOrWhiteSpace(Usuarios.Telefono))
        {
            toast.ShowError("El campo Teléfono no puede esta vacio");
            paso = false;
        }

        if (String.IsNullOrWhiteSpace(Usuarios.Cedula))
        {
            toast.ShowError("El campo Cédula no puede esta vacio");
            paso = false;
        }

        if (String.IsNullOrWhiteSpace(Usuarios.Direccion))
        {
            toast.ShowError("El campo Dirección no puede esta vacio");
            paso = false;
        }

        return paso;
    }

    public void Eliminar()
    {
        bool esElimino;

        esElimino = UsuariosBLL.Eliminar(Usuarios.UsuarioId);

        if (esElimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    public void ActualizarBalanceDelUsuario()
    {
        foreach (var ListaDeBalances in PrestamosBLL.GetList(consultaDeLosPrestamosDeEsteUsuario => consultaDeLosPrestamosDeEsteUsuario.UsuarioId == Usuarios.UsuarioId))
        {
            Usuarios.Balance += ListaDeBalances.Balance;
        }

    }

}
