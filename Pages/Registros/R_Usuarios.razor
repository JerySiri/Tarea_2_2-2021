@using Tarea_2_2_2021.Models;
@using Tarea_2_2_2021.BLL;

@page "/Usuarios"
@page "/Usuarios/{UsuarioId:int}"

@inject IToastService toast

<EditForm Model="Usuarios" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card justify-content-center">

        <div class="card-header">
            <h3>Registro de Usuarios</h3>
        </div>

        <div class="card-body center">

            @*UsuarioId y Boton Buscar*@
            <div class="form-row">
                <div class="col">
                    <div class="form-group">

                        <label class="form-label">ID</label>
                        <div class="input-group ">
                            <InputNumber @bind-Value="Usuarios.UsuarioId" class="form-control col-5" />

                            <div class="input-group-append">
                                <button type="button" class="btn btn-info" @onclick="Buscar">
                                    <i class="oi oi-magnifying-glass" />
                                    Buscar
                                </button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            @*Nombre*@
            <div class="form-group justify-content-center">

                <label>Nombre</label>
                <InputText @bind-Value="Usuarios.Nombre" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Nombre)" />

            </div>

            @*Telefono*@
            <div class="form-group">

                <label>Teléfono</label>
                <InputText @bind-Value="Usuarios.Telefono" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Telefono)" />

            </div>

            @*Cedula*@
            <div class="form-group">

                <label>Cédula</label>

                <InputText @bind-Value="Usuarios.Cedula" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Cedula)" />
            </div>

            @*Direccion*@
            <div class="form-group">

                <label>Dirección</label>

                <InputText @bind-Value="Usuarios.Direccion" class="form-control col-6" />
                <ValidationMessage For="@(() => Usuarios.Direccion)" />

            </div>

            @*FechaNacimiento*@
            <div class="form-group">

                <label>Fecha De Nacimiento</label>
                <InputDate @bind-Value="Usuarios.FechaNacimiento" class="form-control col-6" />

            </div>

            @*Balance*@
            <div class="form-group">

                <label>Balance</label>
                <InputNumber readonly @bind-Value="Usuarios.Balance" class="form-control col-6" />

            </div>
        </div>

        @*Botones*@
        <div class="card-footer">

            <div class="form-group text-center" display: inline-block>

                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                    <i class="oi oi-file mr-2" />
                    Nuevo

                </button>

                <button type="submit" class="btn btn-lg btn-success">
                    <i class="oi oi-account-login" style="transform:rotate(90deg)" />
                    Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <i class="oi oi-trash mr-2" />
                    Eliminar
                </button>

            </div>

        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int UsuarioId { get; set; }

    private Usuarios Usuarios = new Usuarios();

    protected override void OnInitialized()
    {
        Nuevo(); //siempre se hace nuevo

        Buscar(); //solo hace efecto si se paso un id por parametro
    }

    public void Nuevo()
    {
        Usuarios = new Usuarios();
    }

    private void Buscar()
    {
        if (Usuarios.UsuarioId > 0 )
        {
            var encontrado = UsuariosBLL.Buscar(Usuarios.UsuarioId);

            if (encontrado != null)
            {
                this.Usuarios = encontrado;
                ActualizarBalanceDelUsuario();
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool fueGuardado;

        fueGuardado = UsuariosBLL.Guardar(Usuarios);

        if (fueGuardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool esElimino;

        esElimino = UsuariosBLL.Eliminar(Usuarios.UsuarioId);

        if (esElimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    public void ActualizarBalanceDelUsuario()
    {
        foreach (var ListaDeBalances in PrestamosBLL.GetList(consultaDeLosPrestamosDeEsteUsuario => consultaDeLosPrestamosDeEsteUsuario.UsuarioId == Usuarios.UsuarioId))
        {
            Usuarios.Balance += ListaDeBalances.Balance;
        }

    }

}
