@using Tarea_2_2_2021.Models;
@using Tarea_2_2_2021.BLL;

@page "/Prestamos"
@page "/Prestamos/{PrestamoId:int}"

@inject IToastService toast

<EditForm Model="Prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header justify-content-center">
            <h3>Registro de Prestamos</h3>
        </div>

        
            <br />

            @*PrestamosId*@
            <div class="form-row justify-content-center">
                <div class="col">

                    <div class="form-group">

                        <label class="form-label">ID</label>

                        <div class="input-group ">
                            <InputNumber @bind-Value="Prestamos.PrestamoId" class="form-control col-5" />

                            <div class="input-group-append">
                                <button class="btn btn-info" type="button" @onclick="Buscar"> 
                                    <i class="oi oi-magnifying-glass" />
                                    Buscar
                                </button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            @*Fecha*@
            <div class="form-group">
                <label>Fecha</label>
                <InputDate @bind-Value="Prestamos.FechaCreacion" class="form-control col-6" />
            </div>

            @*PersonaId*@
            <div class="form-group">
                <label>Usuario</label>
                <div>
                    <InputSelect @bind-Value="Prestamos.UsuarioId" class="custom-select form-control col-6">
                        <option>Seleccione un Usuario</option>

                        @foreach (var dept in UsuariosBLL.GetUsuario())
                        {
                            <option value="@dept.UsuarioId">@dept.Nombre</option>

                        }

                    </InputSelect>
                    <ValidationMessage For="@(() => Prestamos.UsuarioId)" />
                </div>
            </div>

            @*Concepto*@
            <div class="form-group">

                <label>Concepto</label>

                <InputText @bind-Value="Prestamos.Concepto" class="form-control col-6" />
                <ValidationMessage For="@(() => Prestamos.Concepto)" />

            </div>

            @*Monto*@
        <div class="form-group">

            <label>Monto</label>
            <InputNumber @bind-Value="Prestamos.Monto" class="form-control col-6" />
            
        </div>

            @*Balance*@
            <div class="form-group">

                <label>Balance</label>
                <InputNumber @bind-Value="Prestamos.Balance" class="form-control col-6" />

            </div>

            @*Botones*@
            <div class="row" display: inline-block>

                <div class="col-2 d-grid gap-2">

                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> 
                        <i class="oi oi-file mr-2" />
                        Nuevo

                    </button>

                </div>

                <div class="col-2 d-grid gap-2">
                    <button type="submit" class="btn btn-lg btn-success">
                        <i class="oi oi-account-login" style="transform:rotate(90deg)" />
                        Guardar
                    </button>
                </div>

                <div class="col-2 d-grid gap-2">
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <i class="oi oi-trash mr-2" />
                        Eliminar
                    </button>
                </div>

            </div>

            <br />
    </div>

</EditForm>


@code {
    [Parameter]
    public int PrestamoId { get; set; }

    private Prestamos Prestamos = new Prestamos();

    protected override void OnInitialized()
    {
        Nuevo(); //siempre se hace nuevo

    }

    public void Nuevo()
    {
        Prestamos = new Prestamos();
    }

    private void Buscar()
    {
        if (Prestamos.PrestamoId > 0 && PrestamosBLL.Existe(Prestamos.PrestamoId))
        {
            var encontrado = PrestamosBLL.Buscar(Prestamos.PrestamoId);

            if (encontrado != null)
                this.Prestamos = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
        else
            toast.ShowWarning("No existe Prestamo con ese Id");
    }

    public void Guardar()
    {
        bool fueGuardado;

        if (!Validar())
            return;

        fueGuardado = PrestamosBLL.Guardar(Prestamos);

        if (fueGuardado)
        {
            toast.ShowSuccess("Guardado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public bool Validar()
    {
        bool paso = true;

        if (Prestamos.UsuarioId <= 0)
        {
            toast.ShowError("Debe elegir un usuario para el prestamo");
            paso = false;
        }

        if (String.IsNullOrWhiteSpace(Prestamos.Concepto))
        {
            toast.ShowError("El campo Concepto no puede esta vacio");
            paso = false;
        }

        if (Prestamos.PrestamoId < 0)
        {
            toast.ShowError("El campo Id no puede ser de valor negativo");
            paso = false;
        }

        return paso;
    }

    public void Eliminar()
    {
        bool esElimino;

        esElimino = PrestamosBLL.Eliminar(Prestamos.PrestamoId);

        if (esElimino)
        {
            toast.ShowSuccess("Eliminado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
}
